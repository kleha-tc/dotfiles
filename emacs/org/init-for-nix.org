#+TITLE: Emacs Configuration
#+STARTUP: overview

* Base
** Tab Width

#+begin_src emacs-lisp
  (setq default-tab-width 2)
#+end_src

** Line Number

#+begin_src elisp
  (global-display-line-numbers-mode)
#+end_src

** org-insert-structure-template

#+begin_src elisp
  (define-key org-mode-map (kbd "C-c s") 'org-insert-structure-template)
#+end_src

* UI
** Color Theme

[[https://github.com/catppuccin/emacs][catppuccin/emacs]]
#+begin_src emacs-lisp
  (load-theme 'catppuccin :no-confirm)
  (setq catppuccin-flavor 'frappe)
  (catppuccin-reload)
#+end_src

[[https://github.com/dracula/emacs][dracula/emacs]]
#+begin_src emacs-lisp
  ; (load-theme 'dracula :no-confirm)
#+end_src

[[https://github.com/bbatsov/solarized-emacs][bbatsov/solarized-emacs]]

#+begin_src elisp
  ; (load-theme 'solarized-dark t)
#+end_src

** Font
#+begin_src elisp
  (set-language-environment "Japanese")
  (add-to-list 'default-frame-alist '(font . "HackGen Console NF" ))
#+end_src

** Toolbar

#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (set-scroll-bar-mode nil)
#+end_src

* Natural Language
** ddskk

[[https://github.com/skk-dev/ddskk][skk-dev/ddskk]]
#+begin_src emacs-lisp
  (require 'ddskk)
  (setq skk-large-jisyo "~/skk/SKK-JISYO.L")
  (defun my/enable-skk ()
    (skk-latin-mode 1))
  (add-hook 'find-file-hooks 'my/enable-skk)
  (setq skk-kutouten-type 'en)
#+end_src

* Utility
** Magit

[[https://github.com/magit/magit][magit/magit]]
#+begin_src emacs-lisp
  (require 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src

** NeoTree

[[https://github.com/jaypei/emacs-neotree][jaypei/emacs-neotree]]
#+begin_src emacs-lisp
  (require 'neotree)
  (global-set-key [f8] 'neotree-toggle)
#+end_src

** Eglot

#+begin_src elisp
  (require 'eglot)
  (use-package eglot
      :bind (("M-s d" . xref-find-definitions)
    	 ("M-s r" . xref-find-reference))
      :config
    )
#+end_src

** Company

#+begin_src elisp
  (use-package company
    :bind (("C-M-i" . 'company-complete)
  	 :map company-active-map
  	 ("M-n" . 'company-select-next)
  	 ("M-p" . 'company-select-previous)
  	 ("M-y" . 'company-complete-selection)
  	 :map company-search-map
  	 ("M-n" . 'company-select-next)
  	 ("M-p" . 'company-select-previous)
  	 ("M-y" . 'company-complete-selection))
    :config
    (global-company-mode)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    (setq company-selection-wrap-around t)
    (setq company-show-numbers t)
    (setq company-frontends
  	'(company-preview-frontend
  	  company-pseudo-tooltip-frontend))
    (setq company-format-margin-function 'company-vscode-dark-icons-margin))
#+end_src

** Emacs-direnv
#+begin_src elisp
  (use-package direnv
    :ensure t
    :config
    (direnv-mode))
#+end_src

** ement.el
#+begin_src elisp
  (use-package ement
    :config
    (ement-connect :uri-prefix "http://localhost:8009"))
#+end_src

** copilot.el
#+begin_src elisp
  (use-package copilot
    :hook
    (prog-mode . copilot-mode)
    :init
    (setq copilot-indent-offset-warning-disable t)
    :config
    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion))
#+end_src

** copilot-chat.el
#+begin_src elisp
  (use-package copilot-chat
  :bind (:map global-map
            ("C-c C-y" . copilot-chat-yank)
            ("C-c M-y" . copilot-chat-yank-pop)
            ("C-c C-M-y" . (lambda () (interactive) (copilot-chat-yank-pop -1)))))
#+end_src

* Programming
** Web-Mode

#+begin_src elisp
  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
  	 ("\\.jsp\\'" . web-mode)
  	 ("\\.gsp\\'" . web-mode)
  	 ("\\ts[x]?\\'" . web-mode)
  	 ("\\js[x]?\\'" . web-mode))
    :hook
    (web-mode . eglot-ensure)
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-current-element-highlight t)
    (add-to-list 'eglot-server-programs '(web-mode . ("typescript-language-server" "--stdio"))))
#+end_src

** Rust-mode

#+begin_src elisp
  (use-package rust-mode
    :mode (("\\.rs\\'" . rust-mode))
    :hook
    (rust-mode . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(rust-mode . ("rust-analyzer"))))
#+end_src

** Nix-mode

#+begin_src elisp
  (use-package nix-mode
    :mode "\\.nix\\'"
    :hook
    (nix-mode .  eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(nix-mode . ("nixd"))))
#+end_src

** Python-mode
#+begin_src elisp
  (use-package python-mode
    :mode "\\.py\\'"
    :hook
    (python-mode . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(python-mode . ("python-lsp-server"))))
#+end_src

** Typst-mode
#+begin_src elisp
  (use-package typst-ts-mode
    :mode "\\.typ\\'"
    :hook
    (typst-ts-mode . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(typst-ts-mode . ("tinymist"))))
#+end_src

** Elm-mode
#+begin_src elisp
  (use-package elm-mode
    :mode "\\.elm\\'"
    :hook
    (elm-mode . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(elm-mode . ("elm-language-server"))))
#+end_src

** Vue-mode

#+begin_src elisp
  (use-package vue-mode
    :mode "\\.vue\\'"
    :hook
    (vue-mode . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(vue-mode . ("vue-language-server" "--stdio"
  						    :initializationOptions
  						    (:typescript
  						     (:tsdk "~/typescript-lib")
  						     :vue
  						     (:hybridMode :json-false)
  						     :serverMode 0
  						     :diagnosticModel 1
  						     :textDocumentSync 2)))))
#+end_src

* Org
** init

#+begin_src emacs-lisp
  (defun my-org-init ()
  )
  (add-hook 'org-mode-hook 'my-org-init)
#+end_src

** Structure Template

enable Org Tempo
[[https://orgmode.org/manual/Structure-Templates.html][structure template - orgmode.org]]

#+begin_src emacs-lisp
  (require 'org-tempo)
  (define-key org-mode-map (kbd "C-c s") 'org-insert-structure-template)
#+end_src

** Org-babel Enable

#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '(
      (rust .t)
    )
  )
#+end_src

** Org-babel Languages

*** Org-Nix-Shell

[[https://github.com/AntonHakansson/org-nix-shell][org-nix-shell]]
#+begin_src emacs-lisp
  (require 'org-nix-shell)
  (add-hook 'org-mode-hook 'org-nix-shell-mode)
#+end_src

*** ob-rust

[[https://github.com/micanzhang/ob-rust][ob-rust]]

#+begin_src rust
  fn main() {
    println!("Hello World");
  };
#+end_src

#+RESULTS:

** Org-Preview-Latex
#+begin_src elisp
  (setq org-latex-create-formula-image-program 'dvipng)
#+end_src

